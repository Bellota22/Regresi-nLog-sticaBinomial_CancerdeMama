# -*- coding: utf-8 -*-
"""ProyectoLogRegBinomial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VYg3hyK3PcEweNdm8ROCscKtOdIBRlzO
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, accuracy_score, ConfusionMatrixDisplay
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
import seaborn as sns

df=pd.read_csv('data.csv')
df.head(5)

df.info()

df.isnull().sum()

df=df.drop(['Unnamed: 32', 'id'],axis=1)

df['diagnosis'].replace(to_replace='M', value=0, inplace=True)
df['diagnosis'].replace(to_replace='B', value=1, inplace=True)

cols = df.columns.values
cols= df.columns.values

fig = plt.figure(figsize=(15,9))
df.corr()['diagnosis'].sort_values(ascending=True).plot(kind='bar')
plt.show()

plt.figure(figsize=(15,15))
sns.heatmap(df.corr(), cmap='coolwarm', annot=True)
plt.show()

from sklearn.preprocessing import MinMaxScaler

scaler=MinMaxScaler()
df_scaled=scaler.fit_transform(df)

df_scaled=pd.DataFrame(df_scaled)

df_scaled.columns=df.columns
df_scaled

sns.countplot(data=df_scaled, x='radius_mean',hue='diagnosis')
#Mientras más grande es el radio de la muestra. es más probable que sea maligno

fig = plt.figure(figsize=(10,10))
sns.pairplot(data= df_scaled, hue='diagnosis') #Toma solamente datos númericos
plt.show() #

X = df_scaled.drop('diagnosis',axis=1)
y = df_scaled['diagnosis'].values

X_train, X_test , y_train, y_test= train_test_split(X,y, test_size=0.3,random_state=42)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

model = LogisticRegression()
result = model.fit(X_train, y_train)

from sklearn import metrics
prediction_test = model.predict(X_test)
print(metrics.accuracy_score(y_test,prediction_test )) #Valor correcto /Valor predicho

cm= confusion_matrix(y_test,prediction_test)
cm

weights = pd.Series(model.coef_[0],
                    index=X.columns.values) 
print(weights.sort_values(ascending=False)[:10].plot(kind='bar'))